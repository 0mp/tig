.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "TIG" 1 "" "" ""
.SH NAME
tig \- text-mode interface for git
.SH "SYNOPSIS"

.nf
tig [options]
tig [options] [\-\-] [git log options]
tig [options] log  [git log options]
tig [options] diff [git diff options]
tig [options] show [git show options]
tig [options] <    [git command output]
.fi

.SH "DESCRIPTION"


Browse changes in a git repository\&. Additionally, tig(1) can also act as a pager for output of various git commands\&.


When browsing repositories, tig(1) uses the underlying git commands to present the user with various views, such as summarized commit log and showing the commit with the log message, diffstat, and the diff\&.


Using tig(1) as a pager, it will display input from stdin and try to colorize it\&.

.SH "OPTIONS"

.TP
\-l
Start up in log view using the internal log command\&.

.TP
\-d
Start up in diff view using the internal diff command\&.

.TP
\-n[INTERVAL], \-\-line\-number[=INTERVAL]
Prefix line numbers in log and diff view\&. Optionally, with interval different than each line\&.

.TP
\-t[NSPACES], \-\-tab\-size[=NSPACES]
Set the number of spaces tabs should be expanded to\&.

.TP
\-v, \-\-version
Show version and exit\&.

.TP
\-\-
End of tig(1) options\&. Useful when specifying command options for the main view\&. Example:

.nf
$ tig \-\- \-\-since=1\&.month
.fi

.TP
log [git log options]
Open log view using the given git log options\&.

.TP
diff [git diff options]
Open diff view using the given git diff options\&.

.TP
show [git show options]
Open diff view using the given git show options\&.

.TP
[git log options]
tig(1) will stop the option parsing when the first command line parameter not starting with "\-" is encountered\&. All options including this one will be passed to git log when loading the main view\&. This makes it possible to say:

.nf
$ tig tag\-1\&.0\&.\&.HEAD
.fi

.SS "Pager mode"


If stdin is a pipe, any log or diff options will be ignored and the pager view will be opened loading data from stdin\&. The pager mode can be used for colorizing output from various git commands\&.


Example on how to colorize the output of git\-show(1):

.nf
$ git show | tig
.fi

.SS "Git command options"


All git command options specified on the command line will be passed to the given command and all will be shell quoted before they are passed to the shell\&.

.RS
.Sh "Note"


If you specify options for the main view, you should not use the \-\-pretty option as this option will be set automatically to the format expected by the main view\&.

.RE


Example on how to open the log view and show both author and committer information:

.nf
$ tig log \-\-pretty=fuller
.fi


See the "Specifying revisions" section below for an introduction to revision options supported by the git commands\&. For details on specific git command options, refer to the man page of the command in question\&.

.SH "ENVIRONMENT VARIABLES"


Several options related to the interface with git can be configured via environment options\&.

.SS "Repository references"


Commits that are referenced by tags and branch heads will be marked by the reference name surrounded by \fI[\fR and \fI]\fR:

.nf
2006\-03\-26 19:42 Petr Baudis         | [cogito\-0\&.17\&.1] Cogito 0\&.17\&.1
.fi


If you want to filter out certain directories under \&.git/refs/, say tmp you can do it by setting the following variable:

.nf
$ TIG_LS_REMOTE="git ls\-remote \&. | sed /\\/tmp\\//d" tig
.fi


Or set the variable permanently in your environment\&.

.TP
TIG_LS_REMOTE
Set command for retrieving all repository references\&. The command should output data in the same format as git\-ls\-remote(1)\&.

.SS "View commands"


It is possible to alter which commands are used for the different views\&. If for example you prefer commits in the main view to be sorted by date and only show 500 commits, use:

.nf
$ TIG_MAIN_CMD="git log \-\-date\-order \-n500 \-\-pretty=raw %s" tig
.fi


Or set the variable permanently in your environment\&.


Notice, how %s is used to specify the commit reference\&. There can be a maximum of 5 %s ref specifications\&.

.TP
TIG_DIFF_CMD
The command used for the diff view\&. By default, git show is used as a backend\&.

.TP
TIG_LOG_CMD
The command used for the log view\&. If you prefer to have both author and committer shown in the log view be sure to pass \-\-pretty=fuller to git log\&.

.TP
TIG_MAIN_CMD
The command used for the main view\&. Note, you must always specify the option: \-\-pretty=raw since the main view parser expects to read that format\&.

.SH "THE VIEWER"


tig(1) presents various \fIviews\fR of a repository\&. Each view is based on output from an external command, most often \fIgit log\fR, \fIgit diff\fR, or \fIgit show\fR\&.

.TP
The main view
Is the default view, and it shows a one line summary of each commit in the chosen list of revision\&. The summary includes commit date, author, and the first line of the log message\&. Additionally, any repository references, such as tags, will be shown\&.

.TP
The log view
Presents a more rich view of the revision log showing the whole log message and the diffstat\&.

.TP
The diff view
Shows either the diff of the current working tree, that is, what has changed since the last commit, or the commit diff complete with log message, diffstat and diff\&.

.TP
The pager view
Is used for displaying both input from stdin and output from git commands entered in the internal prompt\&.

.TP
The help view
Displays the information from the tig(1) man page\&. For the help view to work you need to have the tig(1) man page installed\&.

.SH "KEYS"


Below the default key bindings are shown\&.

.SS "View switching"

.TP
m
Switch to main view\&.

.TP
d
Switch to diff view\&.

.TP
l
Switch to log view\&.

.TP
p
Switch to pager view\&.

.TP
h
Show man page\&.

.TP
Return
If on a commit line show the commit diff\&. Additionally, if in main or log view this will split the view\&. To open the commit diff in full size view either use \fId\fR or press Return twice\&.

.TP
Tab
Switch to next view\&.

.SS "Cursor navigation"

.TP
Up
Move cursor one line up\&.

.TP
Down
Move cursor one line down\&.

.TP
k
Move cursor one line up and enter\&. When used in the main view this will always show the diff of the current commit in the split diff view\&.

.TP
j
Move cursor one line down and enter\&.

.TP
PgUp
Move cursor one page up\&.

.TP
PgDown
Move cursor one page down\&.

.TP
Home
Jump to first line\&.

.TP
End
Jump to last line\&.

.SS "Scrolling"

.TP
Insert
Scroll view one line up\&.

.TP
Delete
Scroll view one line down\&.

.TP
w
Scroll view one page up\&.

.TP
s
Scroll view one page down\&.

.SS "Misc"

.TP
q
Quit

.TP
r
Redraw screen\&.

.TP
z
Stop all background loading\&. This can be useful if you use tig(1) in a repository with a long history without limiting the revision log\&.

.TP
v
Show version\&.

.TP
n
Toggle line numbers on/off\&.

.TP
\fI:\fR
Open prompt\&. This allows you to specify what git command to run\&. Example:

.nf
:log \-p
.fi

.SH "SPECIFYING REVISIONS"


This section describes various ways to specify what revisions to display or otherwise limit the view to\&. Note, that tig(1) does not itself parse the described revision options\&.

.SS "File history"


If you are interested only in those revisions that made changes to a specific file (or even several files) list the files like this:

.nf
$ tig log Makefile
.fi


To avoid ambiguity with repository references such as tag name, be sure to separate file names from other git options using "\-\-"\&. So if you have a file named \fImaster\fR it will clash with the reference named \fImaster\fR, and thus you will have to use:

.nf
$ tag log \-\- master
.fi

.RS
.Sh "Note"


For the main view, avoiding ambiguity will in some cases require you to specify two "\-\-" options\&. The first will make tig(1) stop option processing and the latter will be passed to git log\&.

.RE

.SS "Limit by date or number"


To speed up interaction with git, you can limit the amount of commits to show both for the log and main view\&. Either limit by date using e\&.g\&. \-\-since=1\&.month or limit by the number of commits using \-n400\&.

.RS
.Sh "Note"


You can tune the interaction with git by making use of the options explained in this section\&. For example, by configuring the environment variables described in the "View commands" section\&.

.RE

.SS "Ranges"


Alternatively, commits can be limited to a specific range, such as "all commits between \fItag\-1\&.0\fR and \fItag\-2\&.0\fR"\&. For example:

.nf
$ tig log tag\-1\&.0\&.\&.tag\-2\&.0
.fi


This way of commit limiting makes it trivial to only browse the commits which haven't been pushed to a remote branch\&. Assuming \fIorigin\fR is your upstream remote branch, using:

.nf
$ tig log origin\&.\&.HEAD
.fi


will list what will be pushed to the remote branch\&. Optionally, the ending \fIHEAD\fR can be left out since it is implied\&.

.SS "Limiting by reachability"


Git interprets the range specifier "tag\-1\&.0\&.\&.tag\-2\&.0" as "all commits reachable from \fItag\-2\&.0\fR but not from \fItag\-1\&.0\fR"\&. If you prefer to specify which commit to preview in this way use the following:

.nf
$ tig log tag\-2\&.0 ^tag\-1\&.0
.fi


You can think of \fI^\fR as a negation operator\&. Using this alternate syntax, it is possible to further prune commits by specifying multiple branch cut offs\&.

.SH "BUGS"


Known bugs and problems:

.TP 3
\(bu
If the screen width is very small the main view can draw outside the current view causing bad wrapping\&. Same goes for title and status windows\&.
.LP

.SH "TODO"


Features that should be explored\&.

.TP 3
\(bu
Searching\&.
.TP
\(bu
Locale support\&.
.LP

.SH "COPYRIGHT"


Copyright (c) Jonas Fonseca <fonseca@diku\&.dk>, 2006


This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version\&.

.SH "SEE ALSO"

.nf
git(7): \fIhttp://www.kernel.org/pub/software/scm/git/docs/\fR,
cogito(7): \fIhttp://www.kernel.org/pub/software/scm/cogito/docs/\fR
gitk(1): git repository browser written using tcl/tk,
gitview(1): git repository browser written using python/gtk\&.
.fi

